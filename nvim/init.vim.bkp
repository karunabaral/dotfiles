" Plugins
if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
    silent !curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall
endif

silent! if plug#begin()
Plug 'lewis6991/gitsigns.nvim' " add/change/del line highlighting, git blame!
Plug 'smoka7/hop.nvim', { 'version': '*' } " jump in vim, use smoka7's fork for the camelCase hopping on <Leader>l
Plug 'nvim-lua/plenary.nvim' " required for telescope for find-in-all-files, and nvim-spectre find & replace in all files
Plug 'nvim-telescope/telescope.nvim', { 'tag': '*' } " find in all files, open file in dir
Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' } " for fuzzy searching/sorting
" Plug 'kkharji/sqlite.lua' " dependency of telescope-frecency.nvim -- after update, no longer a dependency
Plug 'nvim-telescope/telescope-frecency.nvim' " frecency (frequency & recency) for telescope
Plug 'nvim-pack/nvim-spectre' " find and replace in all files
Plug 'nvim-tree/nvim-web-devicons' " optional fonticons for tree explorer
"Plug 'nvim-tree/nvim-tree.lua' " tree explorer like GUI IDEs. I don't really like it. Search doesn't work properly, disabling netrw screws with other plugins
"Plug 'kaicataldo/material.vim', { 'branch': 'main' } " theme
"Plug 'itchyny/lightline.vim' " status line
Plug 'nvim-lualine/lualine.nvim' " status line
"Plug 'marko-cerovac/material.nvim' " material theme
Plug 'catppuccin/nvim', { 'as': 'catppuccin' }
"Plug 'Mofiqul/dracula.nvim' " dracula theme
"Plug 'EdenEast/nightfox.nvim' " nightfox nordfox theme
"Plug 'bluz71/vim-nightfly-colors', { 'as': 'nightfly' } " nightfly theme
"Plug 'folke/tokyonight.nvim' " tokyonight-moon theme
Plug 'stevearc/oil.nvim' " apparently this is really cool instead of tree file explorers
Plug 'tpope/vim-fugitive' " open line in github, lightline branch info
Plug 'tpope/vim-rhubarb' " for fugitive + github links, check others for other sites
Plug 'shumphrey/fugitive-gitlab.vim' " for fugitive + gitlab links
"Plug 'dense-analysis/ale' " go to def, hover info, intellisense-type stuff
Plug 'mattn/emmet-vim' " shortcut code
Plug 'mattn/webapi-vim' " in conjunction with emmet-vim for custom snippets
Plug 'nvim-treesitter/nvim-treesitter', { 'do': ':TSUpdate' } " better javascript syntax highlighting/completion
"Plug 'nvim-treesitter/nvim-treesitter-textobjects' " select function/classes etc
" LSP stuff
Plug 'neovim/nvim-lspconfig' " supposedly language syntax/autocomplete/intellisense stuff?
Plug 'williamboman/mason.nvim'           " Optional
Plug 'williamboman/mason-lspconfig.nvim' " Optional
Plug 'hrsh7th/nvim-cmp'         " Required
Plug 'hrsh7th/cmp-nvim-lsp'     " Required
Plug 'L3MON4D3/LuaSnip'         " Required
Plug 'VonHeikemen/lsp-zero.nvim', { 'branch': 'v2.x' }
" end of LSP stuff
" Plug 'neoclide/vim-jsx-improve' " javascriptreact syntax, better react/jsx
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
Plug 'leafOfTree/vim-svelte-plugin' " for Svelte + emmet
Plug 'akinsho/git-conflict.nvim', { 'tag': '*' } " merge conflict resolution, latest tag (just in case main is broken)
Plug 'yorickpeterse/nvim-pqf' " for prettier git-conflict list page
Plug 'kdheepak/lazygit.nvim' " full git ui but slow, git-conflict prob better
"Plug 'pocco81/auto-save.nvim' " auto saving! can just use an autocmd with updatetime, works a bit better actually
Plug 'chrisgrieser/nvim-spider' " camelCase and snake_case motion
Plug 'chrisgrieser/nvim-various-textobjs' " camelCase, kebab-case and snake_case selection
Plug 'machakann/vim-sandwich' " sandwich text in brackets/quotes/tags/etc, sadly not lua
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install' }
Plug 'windwp/nvim-autopairs' " auto ) for (
Plug 'NMAC427/guess-indent.nvim' " guess the indent since autopairs etc seem to fuck it up
"Plug 'kana/vim-textobj-indent' " supposedly required for CSS concentric sorting? Seems to work without it though?
Plug 'bzf/vim-concentric-sort-motion' " CSS concentric sorting, gscii
Plug 'sQVe/sort.nvim' " for sorting selections with :Sort
Plug 'akinsho/bufferline.nvim', { 'tag': '*' } " show buffers like tabs
Plug 'uga-rosa/ccc.nvim' " colour picker and shower!
Plug 'stevearc/conform.nvim' " for prettierd (from Mason)
call plug#end()
endif

" Settings
" editorConfig is enabled by default in neovim: https://neovim.io/doc/user/editorconfig.html
lua <<EOF
-- To install all the nerd fonts:
-- brew tap homebrew/cask-fonts && brew search '/font-.*-nerd-font/' | awk '{ print $1 }' | xargs -I{} brew install --cask {} || true
require 'oil'.setup {
    default_file_explorer = false, -- fuuuuck I still need netrw for :GBrowse, don't just disable it!!!
    delete_to_trash = true,
    trash_command = 'trash',
    view_options = {
        show_hidden = true,
    },
    float = {
        padding = 3,
    },
}
require 'conform'.setup {
    formatters_by_ft = {
        -- lua = { "stylua" },
        -- Conform will run multiple formatters sequentially
        -- python = { "isort", "black" },
        -- Use a sub-list to run only the first available formatter
        javascript = { { "prettierd", "prettier" } },
        -- run with conform.format()
    },
}
vim.api.nvim_create_user_command("Format", function(args)
  local range = nil
  if args.count ~= -1 then
    local end_line = vim.api.nvim_buf_get_lines(0, args.line2 - 1, args.line2, true)[1]
    range = {
      start = { args.line1, 0 },
      ["end"] = { args.line2, end_line:len() },
    }
  end
  require("conform").format({ async = true, lsp_fallback = true, range = range })
end, { range = true })
--require 'nvim-treesitter.configs'.setup {
--    textobjects = {
--        select = {
--            enable = true,
--            -- Automatically jump forward to textobj, similar to targets.vim
--            lookahead = true,
--
--            keymaps = {
--                -- You can use the capture groups defined in textobjects.scm
--                ["af"] = "@function.outer",
--                ["if"] = "@function.inner",
--                ["ac"] = "@class.outer",
--                -- You can optionally set descriptions to the mappings (used in the desc parameter of
--                -- nvim_buf_set_keymap) which plugins like which-key display
--                ["ic"] = { query = "@class.inner", desc = "Select inner part of a class region" },
--                -- You can also use captures from other query groups like `locals.scm`
--                ["as"] = { query = "@scope", query_group = "locals", desc = "Select language scope" },
--                },
--            -- You can choose the select mode (default is charwise 'v')
--            --
--            -- Can also be a function which gets passed a table with the keys
--            -- * query_string: eg '@function.inner'
--            -- * method: eg 'v' or 'o'
--            -- and should return the mode ('v', 'V', or '<c-v>') or a table
--            -- mapping query_strings to modes.
--            selection_modes = {
--                ['@parameter.outer'] = 'v', -- charwise
--                ['@function.outer'] = 'V', -- linewise
--                ['@class.outer'] = '<c-v>', -- blockwise
--                },
--            -- If you set this to `true` (default is `false`) then any textobject is
--            -- extended to include preceding or succeeding whitespace. Succeeding
--            -- whitespace has priority in order to act similarly to eg the built-in
--            -- `ap`.
--            --
--            -- Can also be a function which gets passed a table with the keys
--            -- * query_string: eg '@function.inner'
--            -- * selection_mode: eg 'v'
--            -- and should return true of false
--            include_surrounding_whitespace = true,
--        }
--    }
--}
--require 'nvim-tree'.setup {}
-- require 'auto-save'.setup {
--     enabled = true,
--     execution_message = { cleaning_interval = 2000 },
--     trigger_events = {"InsertLeave", "TextChanged", "TextYankPost"},
--     debounce_delay = 2000
-- }
-- debounce_delay technically doesn't do anything, waiting on https://github.com/pocco81/auto-save.nvim/issues/61
require 'lualine'.setup {
    options = {
        -- theme = 'material',
        theme = 'catppuccin-mocha',
    },
    sections = {
        lualine_c = {
            {
                'filename',
                path = 1,
            }
        }
    },
}
-- require 'material'.setup {
--     lualine_style = 'default',
--     plugins = {
--         'gitsigns',
--         'nvim-cmp',
--         'nvim-web-devicons',
--         'telescope',
--     },
--     styles = {
--         comments = { italic = true },
--         functions = { bold = true },
--     },
--     custom_colors = function(colors)
--         colors.editor.cursor = "#F4DBD6"
--     end
-- }
require 'gitsigns'.setup {
    numhl = true,
    word_diff = true,
    current_line_blame = true
}
require 'hop'.setup {
    keys = 'ntesiroamvclpufywhdx',
    uppercase_labels = true
}

-- LSP stuff
local lsp = require('lsp-zero').preset({})

lsp.on_attach(function(client, bufnr)
  -- see :help lsp-zero-keybindings
  -- to learn the available actions
  lsp.default_keymaps({buffer = bufnr})
end)

-- " (Optional) Configure lua language server for neovim
require('lspconfig').lua_ls.setup(lsp.nvim_lua_ls())

require('nvim-autopairs').setup {}
local cmp_autopairs = require('nvim-autopairs.completion.cmp')
local cmp = require('cmp')

cmp.setup({
    mapping = {
        ['<CR>'] = cmp.mapping.confirm({select = false}),
        ['<Tab>'] = cmp.mapping(function(fallback)
                -- This little snippet will confirm with tab, and if no entry is selected, will confirm the first item
                if cmp.visible() then
                    local entry = cmp.get_selected_entry()
                        if not entry then
                            cmp.select_next_item({ behavior = cmp.SelectBehavior.Select })
                        else
                            cmp.confirm()
                        end
                else
                    fallback()
                end
            end, {"i","s","c",}),
    }
})
cmp.event:on(
    'confirm_done',
    cmp_autopairs.on_confirm_done()
)

require('lspconfig').tsserver.setup{
    on_attach = on_attach,
    flags = lsp_flags,
    settings = {
        completions = {
            completeFunctionCalls = true
        },
        diagnostics = {
            ignoredCodes = {
                -- https://github.com/microsoft/TypeScript/blob/main/src/compiler/diagnosticMessages.json
                7016, -- Could not find a declaration file for module 'baconjs'. '~/project/node_modules/baconjs/dist/Bacon.js' implicitly has an 'any' type.
                7044, -- Parameter 'x' implicitly has an 'any' type, but a better type may be inferred from usage.
                2556, -- A spread argument must either have a tuple type or be passed to a rest parameter
                2345, -- Argument of type is missing in type
                2416, -- property of type is not assignable to the same property in base type
                -- 2322, -- property 'children' does not exist on type
                -- 2769, -- no overload matches this call
                -- 2305, -- module 'blah' has no exported member 'blah'
            }
        },
        quotePreference = 'single',
        includeCompletionsForImportStatements = true,
        includeInlayPropertyDeclarationTypeHints = false,
        includeInlayVariableTypeHints = false,
        javascript = {
            format = {
                convertTabsToSpaces = true, -- prob don't need this if editorConfig
                tabSize = 4, -- prob don't need this if editorConfig
                semicolons = 'insert', -- prob don't need this if editorConfig
                insertSpaceAfterOpeningAndBeforeClosingEmptyBraces = false,
                insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces = false,
                insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces = false,
                insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets = false,
                insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis = false,
                insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces = false,
                trimTrailingWhitespace = true -- prob don't need this if editorConfig
            }
        },
        implicitProjectConfiguration = {
            checkJs = false
        }
    }
}
require('lspconfig').ember.setup {} -- not sure if this actually does anything, but anyway, for handlebars
-- grammarly in html is a WIP so eh just turn it off atm
require('lspconfig').grammarly.setup {
    config = {
        suggestionCategories = { oxfordComma = "on" } },
--        filetypes = { 'markdown', 'javascriptreact' }
}

lsp.setup()

require('guess-indent').setup {}

require 'nvim-treesitter.configs'.setup {
    ensure_installed = { "astro", "c", "css", "glimmer", "html", "javascript", "jsdoc", "json", "lua", "markdown", "query", "regex", "scss", "svelte", "tsx", "typescript", "vim", "vimdoc", "yaml" },
    highlight = {
       enable = true,
       additional_vim_regex_highlighting = true
    },
    incremental_selection = {
        enable = true,
        keymaps = {
            node_incremental = "v",
            node_decremental = "V",
        },
    },
}
require 'telescope'.setup {
    defaults = {
        file_ignore_patterns = {".git/", "tmp/", "node_modules/", "dist/", ".DS_Store"},
        vimgrep_arguments = {
            'rg',
            '--color=never',
            '--hidden',
            '--no-heading',
            '--with-filename',
            '--line-number',
            '--column',
            '--ignore-case',
            '--smart-case'
        }
    },
    pickers = {
        find_files = {
            hidden = true
        },
        live_grep = {
            hidden = true
        }
    },
    extensions = {
        fzf = {
            fuzzy = true,                    -- false will only do exact matching
            override_generic_sorter = true,  -- override the generic sorter
            override_file_sorter = true,     -- override the file sorter
            case_mode = "smart_case",        -- or "ignore_case" or "respect_case"
                                             -- the default case_mode is "smart_case"
        },
        frecency = {
            show_scores = true,
            show_unindexed = true,
            ignore_patterns = {".git/", "tmp/", "node_modules/", "dist/", ".DS_Store"},
        },
    },
}
require 'telescope'.load_extension('fzf')
require 'telescope'.load_extension('frecency')
require 'spectre'.setup {
    open_cmd = 'tabnew',
    is_insert_mode = true,
    mapping = {
       ['send_to_qf'] = {
           map = "<leader>sq"
       },
       ['replace_cmd'] = {
           map = "<leader>sc"
       },
       ['change_view_mode'] = {
           map = "<leader>sv"
       },
       ['resume_last_search'] = {
         map = "<leader>sl"
       }
    }
}
require 'git-conflict'.setup {
    default_mappings = {
        ours = 'co',
        theirs = 'ct',
        none = 'c0',
        both = 'cb',
        next = '[x',
        prev = '[b'
    },
    highlights = { -- They must have background color, otherwise the default color will be used
        current = 'DiffChange',
        incoming = 'DiffAdd',
    },
}
require 'pqf'.setup {}
require 'spider'.setup { skipInsignificantPunctuation = true }
require 'various-textobjs'.setup { useDefaultKeymaps = true }
-- various-textobjs sets camelCase/snake_case parts to S which I find annoying,
-- choosing e as it doesn't exist
vim.keymap.set({ 'o', 'x' }, 'ae', '<cmd>lua require("various-textobjs").subword(false)<CR>')
vim.keymap.set({ 'o', 'x' }, 'ie', '<cmd>lua require("various-textobjs").subword(true)<CR>')

require 'sort'.setup {}

vim.keymap.set('n', '<Leader>b', '<cmd>botright vs new | 1put | windo diffthis<CR>')

-- h/l for left/right on sliders, a toggles the alpha channel
require 'ccc'.setup {
    highlighter = {
        auto_enable = true,
        lsp = true,
    },
}

local function compare_to_clipboard()
    local ftype = vim.api.nvim_eval("&filetype")
    vim.cmd(string.format([[
        execute "normal! \"xy"
        vsplit
        enew
        normal! P
        setlocal buftype=nowrite
        set filetype=%s
        diffthis
        execute "normal! \<C-w>\<C-w>"
        enew
        set filetype=%s
        normal! "xP
        diffthis
    ]], ftype, ftype))
end

-- x is visual mode only. v is visual & select mode. s is select mode only
vim.keymap.set('x', '<Space>d', compare_to_clipboard)

require 'catppuccin'.setup {
    color_overrides = {
        mocha = {
            base = '#13131e',
        },
    },
}
EOF
" end of lua specific stuff

" Auto-save modified buffer during idle after 'updatetime' has elapsed (default 4 sec)
autocmd CursorHoldI,CursorHold * silent! update
set updatetime=1000 " for how long to wait until writing to swapfile
syntax on " Syntax highlighting
" syntax doesn't automatically apply correctly for any of these
augroup set_ft_syntax
  au!
  autocmd BufNewFile,BufRead *.html.twig   set filetype=html
  autocmd BufNewFile,BufRead *.html.twig   set syntax=html
  autocmd BufNewFile,BufRead *.js          set filetype=javascriptreact
  autocmd BufNewFile,BufRead *.js          set syntax=javascriptreact
  autocmd BufNewFile,BufRead *.scss        set syntax=scss
  autocmd BufNewFile,BufRead *.html        set syntax=html
  autocmd BufNewFile,BufRead *.astro       set syntax=html
augroup END
"let g:material_theme_style = 'default'
"let g:material_style = 'deep ocean'
"let g:material_terminal_italics = 1
"lua vim.cmd("colorscheme material")
lua vim.cmd.colorscheme "catppuccin-mocha"
if (has('termguicolors'))
    set termguicolors
endif
" svelte plugin
let g:vim_svelte_plugin_use_typescript = 1
let g:vim_svelte_plugin_use_sass = 1

lua <<EOF
require 'bufferline'.setup {
    options = {
        diagnostics = "nvim_lsp",
        max_name_length = 23,
        max_prefix_length = 20,
        middle_mouse_command = "%bd|e#", -- doesn't work with iTerm
        numbers = "buffer_id",
        right_mouse_command = "%bd|e#", -- doesn't work with iTerm
        tab_size = 23,
        offsets = {
            {
                filetype = "oil",
                text = "Oil",
                text_align = "center",
                separator = true,
            }
        },
    }
}
EOF
" highlight Visual cterm=none ctermbg=Blue ctermfg=cyan
if exists('g:vscode')
    " no lightline on vscode, so turn noshowmode off
    set showmode
else
    set noshowmode " lualine handles this
    " set spell " spell check. :setlocal spell spelllang=en
    " set spelllang=en " spell language, go for regular en so it covers en_us and en_uk
    " Spellcheck ignore camelCase/MixedCase .. but it doesn't work, why not?
    " @TODO: get this to work
    "fun! IgnoreCamelCaseSpell()
    "    syn match myExCapitalWords "\w*[_0-9A-Z-]\w*" contains=@NoSpell
    "    syn cluster Spell add=myExCapitalWords
    "    "syn match CamelCase /\<[a-ZA-Z]\+[a-z]\+[A-Z].\{-}\>/ contains=@NoSpell transparent
    "    "syn cluster Spell add=CamelCase
    "endfun
    "autocmd BufRead,BufNewFile * :call IgnoreCamelCaseSpell()
endif
" lightline settings
"let g:lightline = {
"    \ 'colorscheme': 'material_vim',
"    \ 'active': {
"    \     'left': [ [ 'mode', 'paste' ],
"    \               [ 'readonly', 'filename', 'modified' ],
"    \               [ 'gitbranch' ] ],
"    \     'right': [ [ 'lineinfo' ],
"    \                [ 'percent' ],
"    \                [ 'filetype' ] ]
"    \ },
"    \ 'component_function': {
"    \     'gitbranch': 'FugitiveHead',
"    \     'filename': 'LightlineFilename'
"    \ },
"    \ 'component': {
"    \     'lineinfo': '%3l:%-2v%<'
"    \ }
"\ }

"function! LightlineFilename()
"    return expand('%:t') !=# '' ? expand('%:ft') : '[No Name]'
"endfunction

"if exists('g:vscode')
"    let g:ale_completion_enabled = 0
"    let b:ale_linters = {}
"    let g:ale_linters_explicit = 1
"else
    " gonna use LSPs
"    let g:ale_completion_enabled = 0
"    let g:ale_linter_aliases = {'javascript': ['css', 'javascript']}
"    let g:ale_linters = {'javascript': ['stylelint', 'eslint', 'tsserver']}
"    let g:ale_fixers = {
"    \   '*': ['trim_whitespace'],
"    \   'javascript': ['stylelint', 'eslint']
"    \ }
"endif
set timeoutlen=300
set whichwrap=b,s,<,>
set tabstop=4
set shiftwidth=4
set expandtab smarttab
set scrolloff=5
set encoding=utf-8
set showmatch " Shows matching brackets
set ruler " Always shows location in file (line# and column, this is in status bar)
set number " show line numbers in insert mode, and below autocmd to also show relative line numbers otherwise
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu && mode() != "i" | set rnu   | endif
  autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu                  | set nornu | endif
augroup END
set smarttab " Auto-tabs for certain code
set backspace=indent,eol,start
set ignorecase smartcase
filetype plugin indent on
set autoindent smartindent
" Previous: tab:»\ 
set list listchars=tab:│┈,extends:›,precedes:‹,nbsp:·,space:·,trail:·
set textwidth=0
set clipboard=unnamedplus
set wildignore+=**/node_modules/**,.git/**,dist/**,**/*.jpg,**/*.jpeg,**/*.png,**/*.gif
if exists('&colorcolumn')
    set colorcolumn=140
endif

" Emmet settings
let g:user_emmet_leader_key = ','
let g:user_emmet_expandabbr_key = '<A-Tab>'
let g:user_emmet_mode = 'a' " a is all, n is normal, inv is insert/normal/visual (same as a)
let g:user_emmet_settings = { 'javascript': { 'extends': 'jsx,scss' }, 'javascript.jsx': { 'extends': 'jsx,scss' } }

" Leader key remaps
let mapleader = ' '
let maplocalleader = ' '
nnoremap <Leader>qu <cmd>q<CR>
nnoremap <Leader>qun <cmd>q!<CR>
nnoremap <Leader>q <cmd>bd<CR>
nnoremap <Leader>qn <cmd>bd!<CR>
nnoremap <Leader>qo <cmd>BufferLineCloseOthers<CR>
function! WarnMultiOrSingle(char)
    let command = "yiw$%o\<CR>console.warn('arst ', );\<Esc>5hp3lp=="

    " if the end of the line ends in ;, then it's a single-line function, don't need % to get me to the end of the function
    " if getline('.')[col('$')-2] == a:char " guessing the -2 is because of \r ?
    if matchstr(getline('.'), '\%' . (col('$')-1) . 'c.') == a:char
        let command = "yiW$o\<CR>console.warn('arst ', );\<Esc>5hp3lp=="
    endif

    return command
endfunction
nnoremap <expr> <Leader>w WarnMultiOrSingle(';')
" still, keep the inline command anyway just in case
nnoremap <Leader>wi yiw$o<CR>console.warn('arst ', );<Esc>5hp3lp==
nnoremap <Leader>x <cmd>x<CR>
nnoremap <Leader>f <cmd>Telescope live_grep<CR>
" use :FrecencyValidate to clear the frecency DB
nnoremap <Leader>pf <cmd>Telescope find_files<CR>
nnoremap <Leader>p <cmd>Telescope frecency workspace=CWD<CR>
nnoremap <Leader>po <cmd>Telescope buffers<CR>
nnoremap <Leader>pr <cmd>Telescope resume<CR>
nnoremap <Leader>g <Esc>v:'<,'>GBrowse<CR>
" for GBrowse, if use <cmd> instead of : , it doesn't add line number to link
" (leveraging the auto '<,'> from typing :)
vnoremap <Leader>g :GBrowse<CR>
"nnoremap <Leader>a <Plug>(ale_fix)
lua vim.keymap.set('n', '<Leader>a', vim.lsp.buf.format) -- format the code
nnoremap <Leader>; <cmd>Format<CR>
nnoremap <Leader>r <C-r>
nnoremap <Leader>s <cmd>lua require('spectre').toggle()<CR>
nnoremap <Leader>sw <cmd>lua require('spectre').open_visual({select_word=true})<CR>
vnoremap <Leader>sw <Esc><cmd>lua require('spectre').open_visual()<CR>
nnoremap <Leader>sp <cmd>lua require('spectre').open_file_search({select_word=true})<CR>
" buffers instead of tabs
nnoremap <Leader>t <cmd>enew<CR>
nnoremap <Leader>tn <cmd>bp<CR>
nnoremap <Leader>to <cmd>bn<CR>
lua vim.keymap.set({'n', 'v'}, '<Leader>tr', '<cmd>Oil --float<CR>') -- open the Oil tree
lua vim.keymap.set({'n', 'v'}, '<Leader>tr.', '<cmd>Oil . --float<CR>') -- open the Oil tree
"nnoremap 1t 1gt
"nnoremap 2t 2gt
"nnoremap 3t 3gt
"nnoremap 4t 4gt
"nnoremap 5t 5gt
"nnoremap 6t 6gt
"nnoremap 7t 7gt
"nnoremap 8t 8gt
"nnoremap 9t 9gt
lua vim.keymap.set('n', '<Leader>c', vim.diagnostic.open_float) -- open the diagnostic window thing
lua vim.keymap.set('n', '<Leader>co', '<cmd>CccPick<CR>') -- open the colour picker
" add ii for 'in this indentation' or ip for 'in this paragraph' (surrounded
" by empty lines), j/<Down> for 'current line and the one below it', can add numbers like 5<Down>
nnoremap <Leader>v <cmd>set opfunc=ConcentricSort<CR>g@

nnoremap <Leader>lw <cmd>HopWord<CR>
vnoremap <Leader>lw <cmd>HopWord<CR>
nnoremap <Leader>l <cmd>HopCamelCase<CR>
vnoremap <Leader>l <cmd>HopCamelCase<CR>
"nnoremap <Leader>u <Plug>(ale_previous_wrap)
lua vim.keymap.set('n', '<Leader>u', vim.diagnostic.goto_prev) -- go to prev issue
nnoremap <Leader>uu <C-W><C-K>
"nnoremap <Leader>y <Plug>(ale_next_wrap)
lua vim.keymap.set('n', '<Leader>y', vim.diagnostic.goto_next) -- go to next issue
nnoremap <Leader>yy <C-W><C-J>
nnoremap <Leader>n <<
vnoremap <Leader>n <
"lua vim.keymap.set('n', '<Leader>ne', '<cmd>enew<CR>') -- new untitled buffer
nnoremap <Leader>e ddkP
vnoremap <Leader>e dkP
nnoremap <Leader>i ddp
nnoremap <Leader>it <cmd>LazyGit<CR>
vnoremap <Leader>i dp
nnoremap <Leader>o >>
vnoremap <Leader>o >
nnoremap <Leader>, yyP
vnoremap <Leader>, y0P
nnoremap <Leader>. yyp
vnoremap <Leader>. y`>p
"nnoremap <Leader>/ :ALEHover<CR>
"nnoremap <F12> :ALEGoToDefinition<CR>
lua vim.keymap.set({'n', 'i'}, '<F12>', vim.lsp.buf.definition) -- go to definition
lua vim.keymap.set({'n', 'i'}, '<F12><F12>', '<cmd>tab split | lua vim.lsp.buf.definition()<CR>') -- go to definition in a new tab
lua vim.keymap.set('n', '<Leader>/', vim.lsp.buf.hover) -- open the intellisense thing
lua vim.keymap.set('n', '<Leader>m', vim.lsp.buf.code_action) -- open the code actions thing
"nnoremap <Leader>m :ALERename<CR> " covered by f2, my own layer
nnoremap <Leader>md <Plug>MarkdownPreview
nnoremap <Leader>mds <Plug>MarkdownPreviewStop
"nnoremap <Leader>d gdcgn
" git-conflict mappings
nnoremap <Leader>1 <cmd>GitConflictListQf<CR>
nnoremap <Leader>2 <Plug>(git-conflict-next-conflict)
nnoremap <Leader>3 <Plug>(git-conflict-prev-conflict)
nnoremap <Leader>4 <Plug>(git-conflict-ours)
nnoremap <Leader>5 <Plug>(git-conflict-both)
nnoremap <Leader>6 <Plug>(git-conflict-theirs)
nnoremap <Leader>0 <Plug>(git-conflict-none)

" see if I can get vscode shortcuts for prev/next change, prev/next issue
" seems that only opt-sft-f5/f8 work, the without shift doesn't
" :h META, D = cmd, M = opt, S = shift, C = ctrl
nnoremap <M-S-F5> g;
nnoremap <M-F5> g,
lua vim.keymap.set('n', '<M-S-F8>', vim.diagnostic.goto_prev) -- go to prev issue
lua vim.keymap.set('n', '<M-F8>', vim.diagnostic.goto_next) -- go to next issue
nnoremap gl $
nnoremap gh ^

" make Y behave like other capitals
nnoremap Y y$
" go to opening bracket
nnoremap [[ ?{<CR>w99[{
" go to ending bracket
nnoremap ]] /}<CR>b99]}
" not really sure anymore, also seems to go to opening bracket
nnoremap ][ j0[[%/{<CR>
" not really sure anymore, top of function?
nnoremap [] k$][%?}<CR>

" Code completion
"inoremap {{ {}<Left>
"inoremap {<CR> {<CR>}<Esc>O
"inoremap (( ()<Left>
"inoremap (<CR> (<CR>)<Esc>O
"inoremap [[ []<Left>
"inoremap [<CR> [<CR>]<Esc>O
"inoremap "" ""<Left>
"inoremap '' ''<Left>
"inoremap `` ``<Left>
"inoremap `<CR> `<CR>`<Esc>O
inoremap /arn () => <Esc>4hi
inoremap /arc () => {}<Esc>6hi
inoremap /arp () => ()<Esc>6hi
inoremap /fnc function () {}<Esc>4hi
inoremap /stc const  = styled.div`<CR>    <CR>`;<Esc><<^2k6li
inoremap /jsd /**<cr> * <cr>*/<Esc>k$a
inoremap /cmt /**  */<Esc>2hi
inoremap /cow console.warn();<Esc>hi
inoremap /coi console.info();<Esc>hi
inoremap /col console.log();<Esc>hi
inoremap /cop 'arst<Space>',<Space><Esc>3hp3lp==
" make C-d in insert mode delete forward
inoremap <C-d> <Del>
" make opt-right, opt-left work correctly
"nnoremap <M-f> <cmd>lua require('spider').motion('w')<CR>
"inoremap <M-f> <cmd>lua require('spider').motion('w')<CR>
"vnoremap <M-f> <cmd>lua require('spider').motion('w')<CR>
" camelCase snake_case
"vnoremap <M-b> <cmd>lua require('spider').motion('b')<CR>
"inoremap <M-b> <cmd>lua require('spider').motion('b')<CR>
lua vim.keymap.set({'n', 'i', 'v'}, '<M-f>', '<cmd>lua require("spider").motion("w")<CR>')
lua vim.keymap.set({'n', 'i', 'v'}, '<M-Right>', '<cmd>lua require("spider").motion("w")<CR>')
lua vim.keymap.set({'n', 'i', 'v'}, '<M-b>', '<cmd>lua require("spider").motion("b")<CR>')
lua vim.keymap.set({'n', 'i', 'v'}, '<M-Left>', '<cmd>lua require("spider").motion("b")<CR>')

" Navigation as spider, turn it off just so diw/ciw and w are consistent, type
" thing. Don't think I need it for these. Just for opt+left/right is probably
" fine
"nnoremap w <cmd>lua require('spider').motion('w')<CR>
"nnoremap e <cmd>lua require('spider').motion('e')<CR>
"nnoremap b <cmd>lua require('spider').motion('b')<CR>
"nnoremap ge <cmd>lua require('spider').motion('ge')<CR>

" commands
"command Bothers :BufferLineCloseOthers
