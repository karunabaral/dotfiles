-- Pull in the wezterm API --
local wezterm = require 'wezterm'

-- This table will hold the configuration. --
local config = {}

-- In newer versions of wezterm, use the config_builder which will
-- help provide clearer error messages --
if wezterm.config_builder then
  config = wezterm.config_builder()
end

-- This is where you actually apply your config choices --

-- For example, changing the color scheme: --
config.color_scheme = 'Catppuccin Mocha'

config.colors = {
  background = '#13131e',
}

config.inactive_pane_hsb = {
  saturation = 0.4,
  brightness = 0.7,
}

-- Fonts --
local font = 'FantasqueSansM Nerd Font Mono'
config.font = wezterm.font(font)
config.font_size = 27

-- Tab bar --
config.window_frame = {
  font = wezterm.font(font, { weight = 'Bold' }),
  font_size = 20,
}

local function tab_title(tab_info)
  local title = tab_info.tab_title
  -- if the tab title is explicitly set, take that
  if title and #title > 0 then
    return title
  end
  -- Otherwise, use the title from the active pane
  -- in that tab

  local HOME_DIR = string.format("file://%s", os.getenv("HOME"))
  -- return current_dir == HOME_DIR and "." or string.gsub(current_dir, "(.*[/\\])(.*)", "%2")
  local activePane = tab_info.active_pane
  local currentDir = ("~" .. activePane.current_working_dir:gsub(HOME_DIR, '')):gsub('~file://', '')
  local activeProcess = string.gsub(activePane.foreground_process_name, '(.*[/\\])(.*)', '%2')
  local tabIndex = tab_info.tab_index
  local tabId = tabIndex < 8 and tabIndex + 1 .. ': ' or ''

  return (activeProcess and #activeProcess > 0) and tabId .. (currentDir .. ' | ' .. activeProcess .. ' ') or tab_info.tab_id or 'Untitled '
end

wezterm.on("format-tab-title", function(tab, tabs, panes, config, hover, max_width)
  -- local title = string.format(" %s  %s ~ %s  ", "‚ùØ", tab_title(tab))
  local title = tab_title(tab)

  return {
    { Text = title },
  }
end)

-- keyboard shortcuts --
local act = wezterm.action
config.keys = {
  {
    key = 'd',
    mods = 'CMD',
    action = act.SplitHorizontal { domain = 'CurrentPaneDomain' },
  },
  {
    key = 'd',
    mods = 'CMD|SHIFT',
    action = act.SplitVertical { domain = 'CurrentPaneDomain' },
  },
  {
    key = 'w',
    mods = 'CMD',
    action = act.CloseCurrentPane { confirm = true },
  },
  {
    key = 'LeftArrow',
    mods = 'OPT',
    action = act { SendString = "\x1bb" },
  },
  {
    key = 'RightArrow',
    mods = 'OPT',
    action = act { SendString = "\x1bf" },
  },
  {
    key = 'LeftArrow',
    mods = 'CMD',
    action = act { SendString = "\x1bOH" },
  },
  {
    key = 'RightArrow',
    mods = 'CMD',
    action = act { SendString = "\x1bOF" },
  },
  {
    key = '[',
    mods = 'CMD',
    action = act.ActivatePaneDirection 'Next',
  },
  {
    key = 'LeftArrow',
    mods = 'CMD|ALT',
    action = act.ActivateTabRelative(-1),
  },
  {
    key = 'RightArrow',
    mods = 'CMD|ALT',
    action = act.ActivateTabRelative(1),
  },
}

-- Debugging --
-- config.debug_key_events = true

-- and finally, return the configuration to wezterm --
return config
